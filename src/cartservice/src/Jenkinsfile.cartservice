pipeline {
    agent { label 'dev' } // Main Jenkins agent with the 'dev' label
    parameters {
        booleanParam(name: 'PUSH_TO_ECR', defaultValue: true, description: 'Push image to AWS ECR')
        booleanParam(name: 'PUSH_TO_ARTIFACTORY', defaultValue: false, description: 'Push image to JFrog Artifactory')
        booleanParam(name: 'PUSH_TO_DOCKERHUB', defaultValue: false, description: 'Push image to DockerHub')
    }

    environment {
        REPO_URL = 'https://github.com/kapilkumaria/gcp-online-boutique-microservices.git'
        SONARQUBE_SERVER = 'sonarQube'
        SONARQUBE_URL = 'http://52.2.64.174:9000'
        SONARQUBE_TOKEN = credentials('sonar-token') // SonarQube token stored in Jenkins
        SERVICE_NAME = 'cartservice'
        ECR_REPO_MICROSERVICES = '931058976119.dkr.ecr.us-east-1.amazonaws.com/gcp-cartservice'
        PATH = "/usr/share/dotnet:/usr/bin:${env.PATH}"
    }
    
    stages {
        stage('Clean Workspace') {
            steps {
                deleteDir() // Ensures a clean workspace at the beginnings
            }
        }
            
        stage('Clone Repository') {
            steps {
                echo "Cloning the repository from ${REPO_URL} for ${SERVICE_NAME}"
                git url: "${REPO_URL}", branch: 'feature/cicd'
            }
        }

        stage('Restore Dependencies and SonarQube Analysis') {
            steps {
                script {
                    withSonarQubeEnv('sonarQube') {
                        withCredentials([string(credentialsId: 'sonar-token', variable: 'SONARQUBE_TOKEN')]) {
                            sh '''
                                export PATH="/usr/share/dotnet:$PATH:$HOME/.dotnet/tools"  # Ensure sonarscanner is on PATH
                                cd src/cartservice
                                dotnet restore
                                dotnet sonarscanner begin \
                                    /k:"${SERVICE_NAME}" \
                                    /d:sonar.host.url="${SONARQUBE_URL}" \
                                    /d:sonar.login="$SONARQUBE_TOKEN"

                                # Build the project after starting SonarQube analysis
                                dotnet build --no-incremental

                                # End the SonarQube analysis
                                dotnet sonarscanner end \
                                    /d:sonar.login="$SONARQUBE_TOKEN"
                            '''
                        }
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "Building Docker image for ${SERVICE_NAME}"
                sh """
                    docker build -t ${SERVICE_NAME}:latest -f src/cartservice/src/Dockerfile src/cartservice/src
                """
            }
        }

        stage('Push AdService Image to AWS ECR') {
           when {
               expression { params.PUSH_TO_ECR }
           }
    
           steps {
               withCredentials([
                    string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY'),
                    
                ]) {
                    sh '''
                      aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 931058976119.dkr.ecr.us-east-1.amazonaws.com
                      docker tag ${SERVICE_NAME}:latest ${ECR_REPO_MICROSERVICES}:${BUILD_NUMBER}
                      docker push ${ECR_REPO_MICROSERVICES}:${BUILD_NUMBER}
                    '''
                    }
             }
         }

         
        stage('Push AdService Image to JFrog Artifactory') {
            when {
                expression { params.PUSH_TO_ARTIFACTORY }
            }
            steps {
              withCredentials([
                    string(credentialsId: 'JFROG_URL', variable: 'JFROG_URL'),
                    string(credentialsId: 'JFROG_USERNAME', variable: 'JFROG_USERNAME'),
                    string(credentialsId: 'JFROG_TOKEN', variable: 'JFROG_TOKEN'),
                    string(credentialsId: 'JFROG_IMAGE_TAG', variable: 'JFROG_IMAGE_TAG')                    
                ]) {
                sh '''
 
                  echo "$JFROG_TOKEN" | docker login "$JFROG_URL" --username "$JFROG_USERNAME" --password-stdin

                  docker tag $SERVICE_NAME:latest $JFROG_IMAGE_TAG/$SERVICE_NAME:$BUILD_NUMBER
                  docker push $JFROG_IMAGE_TAG/$SERVICE_NAME:$BUILD_NUMBER
                '''
                echo "Web image pushed to JFrog Artifactory successfully."
                }
            }
        }

         stage('Push AdService Image to DockerHub') {
            when {
                expression { params.PUSH_TO_DOCKERHUB }
            }
            steps {
              withCredentials([
                    string(credentialsId: 'DOCKERHUB_URL', variable: 'DOCKERHUB_URL'), 
                    string(credentialsId: 'DOCKERHUB_USERNAME', variable: 'DOCKERHUB_USERNAME'),
                    string(credentialsId: 'DOCKERHUB_TOKEN', variable: 'DOCKERHUB_TOKEN'),
                    string(credentialsId: 'DOCKERHUB_IMAGE_TAG', variable: 'DOCKERHUB_IMAGE_TAG'),

              ]) {
                sh '''
                  echo "$DOCKERHUB_TOKEN" | docker login "$DOCKERHUB_URL" --username "$DOCKERHUB_USERNAME" --password-stdin
                  docker tag $SERVICE_NAME:latest $DOCKERHUB_IMAGE_TAG/$SERVICE_NAME:$BUILD_NUMBER
                  docker push $DOCKERHUB_IMAGE_TAG/$SERVICE_NAME:$BUILD_NUMBER
                '''
                echo "Web image pushed to DockerHub successfully."
                }
            }
        }
    
         stage('Update Kubernetes Manifest for ArgoCD') {
    steps {
        script {
            withCredentials([
                string(credentialsId: 'GITHUB_TOKEN', variable: 'GITHUB_TOKEN'),
                string(credentialsId: 'DOCKERHUB_IMAGE_TAG', variable: 'DOCKERHUB_IMAGE_TAG')
            ]) {

                 // Clean the workspace directory before cloning
//                sh 'rm -rf ./*'
                sh 'rm -rf ./* ./.??*'
                
                // Clone the repository
                sh 'git clone -b feature/cicd https://jenkins-bot:${GITHUB_TOKEN}@github.com/kapilkumaria/gcp-online-boutique-microservices.git .'
                

                // Modify the manifest file with the new DockerHub image tag
                def newImageTag = "${DOCKERHUB_IMAGE_TAG}/${SERVICE_NAME}:${BUILD_NUMBER}"
                sh """
                    sed -i 's|image: .*|image: ${newImageTag}|g' kubernetes-manifests/cartservice.yaml
                """

                // Commit and push the changes to the feature/kubernetes-manifests branch
                sh """
                    git config user.name "jenkins-bot"
                    git config user.email "jenkins-bot@yourdomain.com"
                    git add kubernetes-manifests/cartservice.yaml
                    git commit -m "Update image tag for ${SERVICE_NAME} to DockerHub ${BUILD_NUMBER}"
                    git push https://jenkins-bot:${GITHUB_TOKEN}@github.com/kapilkumaria/gcp-online-boutique-microservices.git
                """                
            }
         }
     }
   }
        
    }

    post {
        success {
            echo "Pipeline completed successfully for ${SERVICE_NAME}!"
        }
        failure {
            echo "Pipeline failed for ${SERVICE_NAME}. Please check logs for details."
        }
    }
}